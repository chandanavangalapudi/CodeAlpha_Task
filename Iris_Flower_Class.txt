{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMSkXPJB3lSeoorJMaKt9Zz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"AP5izH0zyFlR"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RHALg03DZiji","executionInfo":{"status":"ok","timestamp":1734689740285,"user_tz":-330,"elapsed":463,"user":{"displayName":"Chandana Vangalapudi","userId":"00910860155794841982"}},"outputId":"d91e4849-a9f2-422c-af70-a22e27895e82"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 1.00\n","Confusion Matrix:\n","[[10  0  0]\n"," [ 0  9  0]\n"," [ 0  0 11]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","      setosa       1.00      1.00      1.00        10\n","  versicolor       1.00      1.00      1.00         9\n","   virginica       1.00      1.00      1.00        11\n","\n","    accuracy                           1.00        30\n","   macro avg       1.00      1.00      1.00        30\n","weighted avg       1.00      1.00      1.00        30\n","\n"]}],"source":["import pandas as pd\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","iris = datasets.load_iris()\n","\n","iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n","iris_data['species'] = iris.target\n","\n","species_map = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}\n","iris_data['species'] = iris_data['species'].map(species_map)\n","\n","X = iris_data[iris.feature_names]  # Features\n","y = iris_data['species']            # Target variable\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","clf = DecisionTreeClassifier()\n","clf.fit(X_train, y_train)\n","\n","y_pred = clf.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy:.2f}\")\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","print(\"Classification Report:\")\n","print(class_report)"]}]}